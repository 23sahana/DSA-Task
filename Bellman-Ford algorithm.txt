17.Implement the Bellman-Ford algorithm in Java to find the shortest paths from a 
single source vertex to all other vertices in a weighted directed graph with negative edge weights.
import java.util.*;

public class BellmanFordAlgorithm {

    // Class to represent an edge in the graph
    static class Edge {
        int src, dest, weight;

        Edge(int src, int dest, int weight) {
            this.src = src;
            this.dest = dest;
            this.weight = weight;
        }
    }

    // Method to find the shortest paths from source vertex using Bellman-Ford algorithm
    public static int[] bellmanFord(int[][] graph, int V, int source) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        // Relax all edges (V-1) times
        for (int i = 1; i < V; i++) {
            for (int u = 0; u < V; u++) {
                for (int v = 0; v < V; v++) {
                    if (graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) {
                        dist[v] = dist[u] + graph[u][v];
                    }
                }
            }
        }

        // Check for negative-weight cycles
        for (int u = 0; u < V; u++) {
            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) {
                    // Negative-weight cycle found
                    System.out.println("Graph contains negative weight cycle");
                    return null;
                }
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        // Example graph represented as adjacency matrix (weighted directed graph)
        int[][] graph = {
            { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
            { 0, 0, 8, 0, 0, 0, 0, 11, 0 },
            { 0, 0, 0, 7, 0, 4, 0, 0, 2 },
            { 0, 0, 0, 0, 9, 14, 0, 0, 0 },
            { 0, 0, 0, 0, 0, 10, 0, 0, 0 },
            { 0, 0, 0, 0, 0, 0, 2, 0, 0 },
            { 0, 0, 0, 0, 0, 0, 0, 1, 6 },
            { 0, 0, 0, 0, 0, 0, 0, 0, 7 },
            { 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        };
        int V = graph.length;
        int source = 0;

        int[] shortestDistances = bellmanFord(graph, V, source);

        if (shortestDistances != null) {
            System.out.println("Shortest distances from source vertex " + source + " to all other vertices:");
            for (int i = 0; i < V; i++) {
                System.out.println("Vertex " + i + ": " + shortestDistances[i]);
            }
        }
    }
}
