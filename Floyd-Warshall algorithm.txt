15.Implement the Floyd-Warshall algorithm in Java to find the shortest paths between
all pairs of vertices in a weighted graph.
import java.util.*;

public class FloydWarshallAlgorithm {

    // Method to find the shortest paths between all pairs of vertices using Floyd-Warshall algorithm
    public static int[][] floydWarshall(int[][] graph) {
        int n = graph.length;
        int[][] dist = new int[n][n];

        // Initialize distances array with the given graph
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dist[i][j] = graph[i][j];
            }
        }

        // Applying Floyd-Warshall algorithm
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE &&
                            dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        // Example graph represented as adjacency matrix (weighted graph)
        int[][] graph = {
            { 0, 5, Integer.MAX_VALUE, 10 },
            { Integer.MAX_VALUE, 0, 3, Integer.MAX_VALUE },
            { Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 1 },
            { Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0 }
        };

        int[][] shortestDistances = floydWarshall(graph);

        System.out.println("Shortest distances between all pairs of vertices:");
        for (int i = 0; i < shortestDistances.length; i++) {
            for (int j = 0; j < shortestDistances.length; j++) {
                if (shortestDistances[i][j] == Integer.MAX_VALUE) {
                    System.out.print("INF ");
                } else {
                    System.out.print(shortestDistances[i][j] + " ");
                }
            }
            System.out.println();
        }
    }
}

