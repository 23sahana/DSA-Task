13.Implement an undirected graph in Java with the following functionalities:
Graph Class: Create a Graph class that supports:
Adding vertices and edges.
Removing vertices and edges.
Checking if vertices and edges exist.
Performing graph traversal algorithms like Depth-First Search (DFS) or Breadth-First Search (BFS).
import java.util.*;

// Class representing an undirected graph
public class Graph {
    private Map<Integer, List<Integer>> adjList; // Adjacency list representation of the graph

    // Constructor to initialize the graph
    public Graph() {
        adjList = new HashMap<>();
    }

    // Method to add a vertex to the graph
    public void addVertex(int v) {
        adjList.put(v, new ArrayList<>());
    }

    // Method to add an undirected edge between vertices u and v
    public void addEdge(int u, int v) {
        adjList.get(u).add(v);
        adjList.get(v).add(u);
    }

    // Method to remove a vertex from the graph
    public void removeVertex(int v) {
        // Remove vertex v from adjacency lists of all other vertices
        for (int vertex : adjList.get(v)) {
            adjList.get(vertex).remove(Integer.valueOf(v)); // Remove v from list
        }
        adjList.remove(v); // Remove vertex v itself
    }

    // Method to remove an undirected edge between vertices u and v
    public void removeEdge(int u, int v) {
        adjList.get(u).remove(Integer.valueOf(v));
        adjList.get(v).remove(Integer.valueOf(u));
    }

    // Method to check if a vertex exists in the graph
    public boolean hasVertex(int v) {
        return adjList.containsKey(v);
    }

    // Method to check if an edge exists between vertices u and v
    public boolean hasEdge(int u, int v) {
        return adjList.containsKey(u) && adjList.get(u).contains(v);
    }

    // Method to perform Depth-First Search (DFS) traversal starting from vertex v
    public List<Integer> dfs(int v) {
        List<Integer> visited = new ArrayList<>();
        Set<Integer> visitedSet = new HashSet<>();
        dfsHelper(v, visited, visitedSet);
        return visited;
    }

    private void dfsHelper(int v, List<Integer> visited, Set<Integer> visitedSet) {
        visited.add(v);
        visitedSet.add(v);
        for (int neighbor : adjList.get(v)) {
            if (!visitedSet.contains(neighbor)) {
                dfsHelper(neighbor, visited, visitedSet);
            }
        }
    }

    // Method to perform Breadth-First Search (BFS) traversal starting from vertex v
    public List<Integer> bfs(int v) {
        List<Integer> visited = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visitedSet = new HashSet<>();

        queue.add(v);
        visitedSet.add(v);

        while (!queue.isEmpty()) {
            int current = queue.poll();
            visited.add(current);

            for (int neighbor : adjList.get(current)) {
                if (!visitedSet.contains(neighbor)) {
                    queue.add(neighbor);
                    visitedSet.add(neighbor);
                }
            }
        }

        return visited;
    }

    public static void main(String[] args) {
        Graph graph = new Graph();

        // Adding vertices
        graph.addVertex(0);
        graph.addVertex(1);
        graph.addVertex(2);
        graph.addVertex(3);

        // Adding edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);

        // Checking existence of vertices and edges
        System.out.println("Vertex 1 exists: " + graph.hasVertex(1)); // true
        System.out.println("Edge between 1 and 3 exists: " + graph.hasEdge(1, 3)); // false

        // Performing DFS traversal
        System.out.println("DFS traversal starting from vertex 0: " + graph.dfs(0)); // [0, 1, 2, 3]

        // Performing BFS traversal
        System.out.println("BFS traversal starting from vertex 0: " + graph.bfs(0)); // [0, 1, 2, 3]

        // Removing vertex and edge
        graph.removeEdge(0, 2);
        graph.removeVertex(3);

        System.out.println("Vertex 3 exists after removal: " + graph.hasVertex(3)); // false
        System.out.println("Edge between 0 and 2 exists after removal: " + graph.hasEdge(0, 2)); // false
    }
}

