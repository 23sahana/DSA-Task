2."Implement a stack data structure in Java. A stack is a linear data structure that follows the Last In First Out (LIFO) principle. Your task is to create a class Stack that supports the following operations:

push(element): Add an element to the top of the stack.
pop(): Remove and return the top element of the stack. If the stack is empty, return an appropriate error message or exception.
peek(): Return the top element of the stack without removing it. If the stack is empty, return an appropriate error message or exception.
isEmpty(): Return true if the stack is empty, otherwise return false.
size(): Return the number of elements in the stack."
public class Stack<T> {
    private T[] elements;
    private int top;
    private int capacity;

    public Stack(int initialCapacity) {
        elements = (T[]) new Object[initialCapacity];
        top = -1;
        capacity = initialCapacity;
    }

    // Add an element to the top of the stack
    public void push(T element) {
        if (top == capacity - 1) {
            resize();
        }
        elements[++top] = element;
    }

    // Remove and return the top element of the stack
    public T pop() {
        if (isEmpty()) {
            throw new EmptyStackException("Stack is empty");
        }
        return elements[top--];
    }

    // Return the top element of the stack without removing it
    public T peek() {
        if (isEmpty()) {
            throw new EmptyStackException("Stack is empty");
        }
        return elements[top];
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    // Return the number of elements in the stack
    public int size() {
        return top + 1;
    }

    // Resize the stack when it reaches capacity
    private void resize() {
        T[] newElements = (T[]) new Object[capacity * 2];
        for (int i = 0; i < capacity; i++) {
            newElements[i] = elements[i];
        }
        elements = newElements;
        capacity *= 2;
    }
}