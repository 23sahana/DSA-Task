14.Implement Dijkstra's algorithm in Java to find the shortest path in a weighted graph from a source vertex to all other vertices.
import java.util.*;

public class DijkstraAlgorithm {

    // Class to represent a vertex and its distance from the source
    static class VertexDistance implements Comparable<VertexDistance> {
        int vertex;
        int distance;

        VertexDistance(int vertex, int distance) {
            this.vertex = vertex;
            this.distance = distance;
        }

        @Override
        public int compareTo(VertexDistance other) {
            return Integer.compare(this.distance, other.distance);
        }
    }

    // Method to find the shortest paths from source vertex to all other vertices using Dijkstra's algorithm
    public static int[] dijkstra(int[][] graph, int source) {
        int n = graph.length;
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        PriorityQueue<VertexDistance> minHeap = new PriorityQueue<>();
        minHeap.offer(new VertexDistance(source, 0));

        while (!minHeap.isEmpty()) {
            VertexDistance vd = minHeap.poll();
            int u = vd.vertex;
            int distanceU = vd.distance;

            // If the extracted vertex is already processed, skip
            if (distanceU > dist[u]) {
                continue;
            }

            // Explore all adjacent vertices of u (neighbor vertices)
            for (int v = 0; v < n; v++) {
                if (graph[u][v] != 0) { // There is an edge from u to v
                    int distanceThroughU = dist[u] + graph[u][v];
                    if (distanceThroughU < dist[v]) {
                        dist[v] = distanceThroughU;
                        minHeap.offer(new VertexDistance(v, distanceThroughU));
                    }
                }
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        // Example graph represented as adjacency matrix (weighted graph)
        int[][] graph = {
            { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
            { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
            { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
            { 0, 0, 7, 0, 9, 14, 0, 0, 0 },
            { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
            { 0, 0, 4, 14, 10, 0, 2, 0, 0 },
            { 0, 0, 0, 0, 0, 2, 0, 1, 6 },
            { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
            { 0, 0, 2, 0, 0, 0, 6, 7, 0 }
        };

        int source = 0;
        int[] shortestDistances = dijkstra(graph, source);

        System.out.println("Shortest distances from source vertex " + source + " to all other vertices:");
        for (int i = 0; i < shortestDistances.length; i++) {
            System.out.println("Vertex " + i + ": " + shortestDistances[i]);
        }
    }
}
