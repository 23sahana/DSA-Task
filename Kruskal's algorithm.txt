16.Implement Kruskal's algorithm in Java to find the Minimum Spanning Tree (MST)
of a given undirected, weighted graph.
import java.util.*;

public class KruskalAlgorithm {

    // Class to represent an edge in the graph
    static class Edge implements Comparable<Edge> {
        int src, dest, weight;

        Edge(int src, int dest, int weight) {
            this.src = src;
            this.dest = dest;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge other) {
            return this.weight - other.weight;
        }
    }

    // Class to represent subsets for union-find
    static class Subset {
        int parent, rank;

        Subset(int parent, int rank) {
            this.parent = parent;
            this.rank = rank;
        }
    }

    // Method to find MST using Kruskal's algorithm
    public static List<Edge> kruskalMST(int[][] graph, int V) {
        List<Edge> edges = new ArrayList<>();

        // Step 1: Add all edges to the list
        for (int u = 0; u < V; u++) {
            for (int v = u + 1; v < V; v++) {
                if (graph[u][v] != 0) { // Only consider edges with non-zero weight
                    edges.add(new Edge(u, v, graph[u][v]));
                }
            }
        }

        // Step 2: Sort all edges in non-decreasing order of their weight
        Collections.sort(edges);

        // Step 3: Create V subsets with single elements
        Subset[] subsets = new Subset[V];
        for (int v = 0; v < V; v++) {
            subsets[v] = new Subset(v, 0);
        }

        List<Edge> mst = new ArrayList<>(); // MST to store the result

        int edgeCount = 0; // Count of edges added to the MST
        int index = 0; // Index to iterate through sorted edges

        // Step 4: Iterate through sorted edges and add the smallest edge that does not form a cycle
        while (edgeCount < V - 1 && index < edges.size()) {
            Edge nextEdge = edges.get(index++);
            int x = find(subsets, nextEdge.src);
            int y = find(subsets, nextEdge.dest);

            // If including this edge does not cause a cycle, include it in the MST
            if (x != y) {
                mst.add(nextEdge);
                union(subsets, x, y);
                edgeCount++;
            }
        }

        return mst;
    }

    // Method to find the subset of an element i
    private static int find(Subset[] subsets, int i) {
        if (subsets[i].parent != i) {
            subsets[i].parent = find(subsets, subsets[i].parent);
        }
        return subsets[i].parent;
    }

    // Method to perform union of two subsets
    private static void union(Subset[] subsets, int x, int y) {
        int rootX = find(subsets, x);
        int rootY = find(subsets, y);

        if (subsets[rootX].rank < subsets[rootY].rank) {
            subsets[rootX].parent = rootY;
        } else if (subsets[rootX].rank > subsets[rootY].rank) {
            subsets[rootY].parent = rootX;
        } else {
            subsets[rootY].parent = rootX;
            subsets[rootX].rank++;
        }
    }

    public static void main(String[] args) {
        // Example graph represented as adjacency matrix (weighted graph)
        int[][] graph = {
            { 0, 2, 0, 6, 0 },
            { 2, 0, 3, 8, 5 },
            { 0, 3, 0, 0, 7 },
            { 6, 8, 0, 0, 9 },
            { 0, 5, 7, 9, 0 }
        };
        int V = graph.length;

        List<Edge> mst = kruskalMST(graph, V);

        System.out.println("Edges in the Minimum Spanning Tree (MST):");
        for (Edge edge : mst) {
            System.out.println(edge.src + " - " + edge.dest + " : " + edge.weight);
        }
    }
}

