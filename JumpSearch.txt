7.Implement a Jump Search algorithm in Java to efficiently search for a target value in a sorted array.
public class JumpSearch {

    public static int jumpSearch(int[] arr, int target) {
        int n = arr.length;
        int blockSize = (int) Math.sqrt(n); // Determine the block size
        int step = blockSize;
        int prev = 0;

        // Jumping ahead in blocks
        while (step < n && arr[step] < target) {
            prev = step;
            step += blockSize;
        }

        // Performing linear search in the current block
        for (int i = prev; i < Math.min(step, n); i++) {
            if (arr[i] == target) {
                return i;
            }
        }

        return -1; // Target not found
    }

    public static void main(String[] args) {
        int[] arr = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };
        int target = 14;

        int index = jumpSearch(arr, target);

        if (index != -1) {
            System.out.println("Target " + target + " found at index: " + index); // Output: Target 14 found at index: 6
        } else {
            System.out.println("Target " + target + " not found in the array."); // This line is not displayed in this example.
        }
    }
}
